name: release

on:
  release: # Docs: <https://help.github.com/en/articles/events-that-trigger-workflows#release-event-release>
    types:
      - released
      - prereleased

jobs:
  release-docker:
    name: Release docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2 # Action page: <https://github.com/docker/setup-qemu-action>

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # Action page: <https://github.com/docker/setup-buildx-action>

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate builder values
        id: values
        run: |
          echo "version_full=$(echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//')" >> $GITHUB_OUTPUT
          echo "timestamp=$(echo $(date "+%F %T"))" >> $GITHUB_OUTPUT

      - name: Build image
        uses: docker/build-push-action@v4 # Action page: <https://github.com/docker/build-push-action>
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            APP_VERSION=${{ steps.values.outputs.version_full}}
            BUILD_TIME=${{ steps.values.outputs.timestamp }}
          tags: |
            artarts36/db-exporter:${{ steps.values.outputs.version_full}}

  release-binaries:
    name: Release binaries
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate builder values
        id: values
        run: |
          echo "version=$(echo ${GITHUB_REF##*/} | sed -e 's/^[vV ]*//')" >> $GITHUB_OUTPUT
          echo "buildDate=$(echo $(date +%FT%T%z))" >> $GITHUB_OUTPUT

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: false

      - name: Compile binary files
        uses: crazy-max/ghaction-xgo@v3
        with:
          xgo_version: latest
          go_version: 1.21
          dest: dist
          pkg: ./cmd
          prefix: db-exporter
          targets: windows/amd64,linux/amd64,linux/arm64,darwin/arm64,darwin/amd64
          v: true
          x: false
          race: false
          ldflags: -s -w -X main.Version=${{ steps.values.outputs.version }} -X main.BuildDate=${{ steps.values.outputs.buildDate }}
          buildmode: default
          trimpath: true

      - name: Print compiled files
        run: ls -la ./dist

      - name: Sign and compress dist files
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASS: ${{secrets.GPG_PASS}}
        run: |
          files=("db-exporter-darwin-amd64" "db-exporter-darwin-arm64" "db-exporter-linux-amd64" "db-exporter-linux-arm64" "db-exporter-windows-amd64.exe")
          
          cp README.md LICENSE dist
          
          cd dist

          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              filename=$(basename -- "$file")
              extension="${filename##*.}"
              newFilename="db-exporter.$extension"
              if [ "${filename}" == "${extension}" ]; then
                extension=""
                newFilename="db-exporter"
              fi

              mv $file $newFilename

              gpg --batch --detach-sign --armor "./$newFilename"

              zip -r "$file.zip" "$newFilename" README.md LICENSE "$newFilename.asc"
          
              rm $newFilename
              rm $newFilename.asc
            fi
          done

      - name: Attach binary files to release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.zip"
          generateReleaseNotes: false
          allowUpdates: true
